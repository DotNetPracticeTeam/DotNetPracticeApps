//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Pubs.Data
{
    public partial class title
    {
        #region Primitive Properties
    
        public virtual string id
        {
            get;
            set;
        }
    
        public virtual string name
        {
            get;
            set;
        }
    
        public virtual string type
        {
            get;
            set;
        }
    
        public virtual string publisherid
        {
            get { return _publisherid; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_publisherid != value)
                    {
                        if (publisher != null && publisher.id != value)
                        {
                            publisher = null;
                        }
                        _publisherid = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private string _publisherid;
    
        public virtual Nullable<decimal> price
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> advance
        {
            get;
            set;
        }
    
        public virtual Nullable<int> royalty
        {
            get;
            set;
        }
    
        public virtual Nullable<int> ytdsales
        {
            get;
            set;
        }
    
        public virtual string notes
        {
            get;
            set;
        }
    
        public virtual System.DateTime publishdate
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual publisher publisher
        {
            get { return _publisher; }
            set
            {
                if (!ReferenceEquals(_publisher, value))
                {
                    var previousValue = _publisher;
                    _publisher = value;
                    Fixuppublisher(previousValue);
                }
            }
        }
        private publisher _publisher;
    
        public virtual ICollection<sale> sales
        {
            get
            {
                if (_sales == null)
                {
                    var newCollection = new FixupCollection<sale>();
                    newCollection.CollectionChanged += Fixupsales;
                    _sales = newCollection;
                }
                return _sales;
            }
            set
            {
                if (!ReferenceEquals(_sales, value))
                {
                    var previousValue = _sales as FixupCollection<sale>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupsales;
                    }
                    _sales = value;
                    var newValue = value as FixupCollection<sale>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupsales;
                    }
                }
            }
        }
        private ICollection<sale> _sales;
    
        public virtual ICollection<titleauthor> titleauthors
        {
            get
            {
                if (_titleauthors == null)
                {
                    var newCollection = new FixupCollection<titleauthor>();
                    newCollection.CollectionChanged += Fixuptitleauthors;
                    _titleauthors = newCollection;
                }
                return _titleauthors;
            }
            set
            {
                if (!ReferenceEquals(_titleauthors, value))
                {
                    var previousValue = _titleauthors as FixupCollection<titleauthor>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixuptitleauthors;
                    }
                    _titleauthors = value;
                    var newValue = value as FixupCollection<titleauthor>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixuptitleauthors;
                    }
                }
            }
        }
        private ICollection<titleauthor> _titleauthors;

        #endregion
        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void Fixuppublisher(publisher previousValue)
        {
            if (previousValue != null && previousValue.titles.Contains(this))
            {
                previousValue.titles.Remove(this);
            }
    
            if (publisher != null)
            {
                if (!publisher.titles.Contains(this))
                {
                    publisher.titles.Add(this);
                }
                if (publisherid != publisher.id)
                {
                    publisherid = publisher.id;
                }
            }
            else if (!_settingFK)
            {
                publisherid = null;
            }
        }
    
        private void Fixupsales(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (sale item in e.NewItems)
                {
                    item.title = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (sale item in e.OldItems)
                {
                    if (ReferenceEquals(item.title, this))
                    {
                        item.title = null;
                    }
                }
            }
        }
    
        private void Fixuptitleauthors(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (titleauthor item in e.NewItems)
                {
                    item.title = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (titleauthor item in e.OldItems)
                {
                    if (ReferenceEquals(item.title, this))
                    {
                        item.title = null;
                    }
                }
            }
        }

        #endregion
    }
}
