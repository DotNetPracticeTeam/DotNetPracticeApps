//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Pubs.Data
{
    public partial class publisher
    {
        #region Primitive Properties
    
        public virtual string id
        {
            get;
            set;
        }
    
        public virtual string name
        {
            get;
            set;
        }
    
        public virtual string city
        {
            get;
            set;
        }
    
        public virtual string state
        {
            get;
            set;
        }
    
        public virtual string country
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<employee> employees
        {
            get
            {
                if (_employees == null)
                {
                    var newCollection = new FixupCollection<employee>();
                    newCollection.CollectionChanged += Fixupemployees;
                    _employees = newCollection;
                }
                return _employees;
            }
            set
            {
                if (!ReferenceEquals(_employees, value))
                {
                    var previousValue = _employees as FixupCollection<employee>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupemployees;
                    }
                    _employees = value;
                    var newValue = value as FixupCollection<employee>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupemployees;
                    }
                }
            }
        }
        private ICollection<employee> _employees;
    
        public virtual ICollection<title> titles
        {
            get
            {
                if (_titles == null)
                {
                    var newCollection = new FixupCollection<title>();
                    newCollection.CollectionChanged += Fixuptitles;
                    _titles = newCollection;
                }
                return _titles;
            }
            set
            {
                if (!ReferenceEquals(_titles, value))
                {
                    var previousValue = _titles as FixupCollection<title>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixuptitles;
                    }
                    _titles = value;
                    var newValue = value as FixupCollection<title>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixuptitles;
                    }
                }
            }
        }
        private ICollection<title> _titles;

        #endregion
        #region Association Fixup
    
        private void Fixupemployees(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (employee item in e.NewItems)
                {
                    item.publisher = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (employee item in e.OldItems)
                {
                    if (ReferenceEquals(item.publisher, this))
                    {
                        item.publisher = null;
                    }
                }
            }
        }
    
        private void Fixuptitles(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (title item in e.NewItems)
                {
                    item.publisher = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (title item in e.OldItems)
                {
                    if (ReferenceEquals(item.publisher, this))
                    {
                        item.publisher = null;
                    }
                }
            }
        }

        #endregion
    }
}
